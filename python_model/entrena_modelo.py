# -*- coding: utf-8 -*-
"""entrena_modelo

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GsxTOXwpDMCa-ySJ_RZ6gKoCS-rjx6ix
"""

import pandas as pd
import numpy as np
import joblib
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error
import os

# 📌 Cargar dataset
df = pd.read_csv("QS World University Rankings 2025 (Top global universities).csv", encoding="latin1")

# 📌 Limpiar columna de ranking
def limpiar_rank(valor):
    try:
        if isinstance(valor, str):
            if '-' in valor:
                partes = valor.split('-')
                return (int(partes[0]) + int(partes[1])) / 2
            elif '+' in valor:
                return int(valor.replace('+', '')) + 5
        return float(valor)
    except:
        return np.nan

# 📌 Limpiar columna Overall_Score
def limpiar_score(valor):
    try:
        return float(valor)
    except:
        return np.nan

# 📌 Aplicar limpieza
df['RANK_2025'] = df['RANK_2025'].apply(limpiar_rank)
df['Overall_Score'] = df['Overall_Score'].apply(limpiar_score)

# 📌 Eliminar registros con nulos
df.dropna(subset=[
    'RANK_2025',
    'Academic_Reputation_Score',
    'Employer_Reputation_Score',
    'Sustainability_Score',
    'International_Research_Network_Score',
    'Overall_Score'
], inplace=True)

# 📌 Seleccionar variables de entrada (solo 5)
X = df[['RANK_2025',
        'Academic_Reputation_Score',
        'Employer_Reputation_Score',
        'Sustainability_Score',
        'International_Research_Network_Score']]

y = df['Overall_Score']

# 📌 Dividir datos y entrenar modelo
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

modelo = RandomForestRegressor(n_estimators=100, random_state=42)
modelo.fit(X_train, y_train)

# 📌 Evaluar modelo
y_pred = modelo.predict(X_test)

print("\n✅ Evaluación del modelo:")
print("R2:", r2_score(y_test, y_pred))
print("MSE:", mean_squared_error(y_test, y_pred))
print("MAE:", mean_absolute_error(y_test, y_pred))

# 📌 Guardar modelo
os.makedirs("python_model", exist_ok=True)
joblib.dump(modelo, "python_model/modelo_regresion.pkl")
print("\n📁 Modelo guardado en 'python_model/modelo_regresion.pkl'")